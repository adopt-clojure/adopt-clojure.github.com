{"version":3,"sources":["adopt_clojure/core.cljs"],"mappings":";AAQA,GAAA,QAAAA,0CAAAC,+CAAAC;AAAA;AAAA,AAAA,AAASC,+BAAU,gDAAA,2CAAA,sDAAA,jJAACC;;AAEpB,iCAAA,jCAAMC;AAAN,AAAA,qIAAA,3CACGC,8HAAkBC;;AAErB,2BAAA,3BAAMC;AAAN,AACE,IAAAC,WAAA,mFAA2BJ;IAA3BK,WAC0B,wBAAA,xBAAGE;AAD7B,AAAA,kIAAAH,SAAAC,oDAAAD,SAAAC,hMAACC,8DAAAA,iFAAAA;;AAGH,0BAAA,1BAAeE;AAAf,AAIE,OAACL;;;AAEH,0BAAA,1BAAMM;AAAN,AAGE,mBAAA,ZAACC","names":["js/adopt-clojure","js/adopt-clojure.core","js/adopt-clojure.core.app-state","adopt-clojure.core/app-state","reagent.core.atom","adopt-clojure.core/hello-world","adopt-clojure.templates.home/home-template","adopt-clojure.pages.index/index-page","adopt-clojure.core/start","G__38798","G__38799","reagent.core/render-component","js/document","adopt-clojure.core/init","adopt-clojure.core/stop","js/console.log"],"sourcesContent":["(ns adopt-clojure.core\n  (:require \n   [reagent.core :as reagent :refer [atom]]\n   [adopt-clojure.templates.home :as ht]\n   [adopt-clojure.pages.index :as pi]))\n\n;; define your app data so that it doesn't get over-written on reload\n\n(defonce app-state (atom {:text \"Hello world!\"}))\n\n(defn hello-world []\n  [ht/home-template [pi/index-page]])\n\n(defn start []\n  (reagent/render-component [hello-world]\n                            (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}